# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3:/* data */}
	};
snippet Map
	class ${1:TMap} : public NMR::IMap {
	private:
		OBJECT_METHODS($1)
	public:
		virtual void Do(NMR::TValue key, NMR::TValue value, NMR::TUpdate & result) {
		}
	};
	
	REGISTER_SAVELOAD_CLASS(0x4501770${2:0}, $1)
snippet Reduce
	class ${1:TReduce} : public NMR::IReduce {
	private:
		OBJECT_METHODS($1)
	public:
		virtual void Do(NMR::TValue key, NMR::TTableIterator& iter, NMR::TUpdate & result) {
		}
	};

	REGISTER_SAVELOAD_CLASS(0x4501770${2:0}, $1)
snippet LastGetOpt
	TOpts opts = TOpts::Default();
	
	TOptsParseResult res(&opts, argc, argv);
	yvector<Stroka> free = res.GetFreeArgs();
snippet _b
	char c${2};
	do {
		Cout << ${1} << Endl;
		Cout << "Enter y to continue.. ";
		Cin >> c${2}; 
	}
	while (c${2} != 'y');
snippet _unimp
	ythrow yexception() << "Unimplemented!";
